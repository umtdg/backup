#!/bin/bash

# TODO: Make this a nicer python script/application

# Colors
export c_default="\033[0m"
export c_blue="\033[1;34m"
export c_magenta="\033[1;35m"
export c_cyan="\033[1;36m"
export c_green="\033[1;32m"
export c_red="\033[1;31m"
export c_yellow="\033[1;33m"

# Echo like ... with flag type and display message colors
prompt() {
    case "${1}" in
    "-s")
        echo -e "  ${c_green}${2}${c_default}"
        ;; # print success message
    "-e")
        echo -e "  ${c_red}${2}${c_default}"
        ;; # print error message
    "-w")
        echo -e "  ${c_yellow}${2}${c_default}"
        ;; # print warning message
    "-i")
        echo -e "  ${c_cyan}${2}${c_default}"
        ;; # print info message
    esac
}

# Show help
helpify_title() {
    printf "${c_cyan}%s${c_blue}%s ${c_green}%s\n\n" "Usage: " "$0" "[OPTIONS...]"
    printf "${c_cyan}%s\n" "OPTIONS:"
}

helpify() {
    printf "  ${c_blue}%s ${c_green}%s\n ${c_magenta}%s. ${c_cyan}%s\n\n${c_default}" "${1}" "${2}" "${3}" "${4}"
}

usage() {
    helpify_title
    helpify "-s --source" "DIR" "Directory to make a backup of" "Default is ${source_dir}"
    helpify "-d --dest" "DIR" "Destination directory (Subdirectory is created, i.e. backup is made to <dest>/<backup>/)"
    helpify "--create-dirs" "" "Create directories along the destination path (This does not create subdirectory inside destination. Subdirectory is already created automatically. This is to create directory tree of destination to ensure that it exists)" "Default is no"
    helpify "-e --exclude" "FILE" "File to use for excludes" "Default is ${exclude_from}"
    helpify "-c --crypt" "" "Backup to a crypt device" "Default is no"
    helpify "-b --device" "DEV" "Crypt device, only relevant with --crypt" ""
    helpify "-n --name" "NAME" "Name of the crypt device, only relevant with --crypt" "Default is ${name}"
    helpify "-f --filesystem" "FS" "Filesystem of backup drive, only relevant with --crypt" "Default is ${fstype}"
    helpify "--dry-run" "" "Dry run. Print everything instead of doing anything." ""
    helpify "-h --help" "" "Print this message and exit" ""
}

# Helpers
open_device() {
    # Check if given exclude file exists
    if [[ -f "${exclude_from}" ]]; then
        echo "Found ${exclude_from}"
    else
        echo "Could not found ${exclude_from}"
        exit 1
    fi

    # Check if LUKS device is already opened
    if ! sudo cryptsetup status "$name" 1>/dev/null 2>/dev/null; then
        echo "Opening device $devpath with name $name"
        sudo cryptsetup open "$devpath" "$name" || { echo "Could not open crypt device"; exit 1; }
    else
        echo "Device is already opened"
    fi
}

close_device() {
    echo "Unmounting $mount_point"
    sudo umount "$mount_point" || {
        echo "Umount failed"
        exit 1
    }

    echo "Closing crypt device"
    sudo cryptsetup close "$name" || {
        echo "Could not close crypt device"
        exit 1
    }
}

# Defaults
devpath=""
name="backupdrive"
fstype="ext4"
exclude_from=""
source_dir="/"
external=""
dry_run="no"
use_crypt_device="no"
destination=""
create_dirs="no"

while [[ $# -gt 0 ]]; do
    case "$1" in
    -b | --device)
        devpath="$2"
        shift 2
        ;;
    -n | --name)
        name="$2"
        shift 2
        ;;
    -f | --filesystem)
        fstype="$2"
        shift 2
        ;;
    -e | --exclude)
        exclude_from="$2"
        shift 2
        ;;
    -s | --source)
        source_dir="$2"
        shift 2
        ;;
    -c | --crypt)
        use_crypt_device="yes"
        shift
        ;;
    -d | --dest)
        destination="$2"
        shift 2
        ;;
    --create-dirs)
        create_dirs="yes"
        shift 1
        ;;
    --dry-run)
        dry_run="yes"
        shift
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        usage
        exit 1
        ;;
    esac
done

# Check params
test -d "${source_dir}" && prompt -s "Found source directory ${source_dir}" || { prompt -e "Could not found source directory ${source_dir}"; exit 1; }
# test -f "${exclude_from}" && prompt -s "Found exclude file ${exclude_from}" || { prompt -e "Could not found exclude file ${exclude_from}"; exit 1; }
if [ -n "${exclude_from}" ] && [ ! -f "${exclude_from}" ]; then
    prompt -w "Could not found exclude file ${exclude_from}"
    read -p "Do you want to continue?[y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy] ]]; then
        prompt -i "Continuing without exclude file"
    else
        prompt -e "Exiting..."
        exit 1
    fi
else
    prompt -s "Found exclude file ${exclude_from}"
fi

# Add / at the end of source directory if not already ends with /
case "${source_dir}" in
    */) ;;
    *)
        source_dir="${source_dir}/" ;;
esac

# Backup name (destination directory name)
backup_name="${HOSTNAME:-${USER:-unknown}}"
if [ "${source_dir}" = "/" ]; then
    backup_name="${backup_name}-$(date +%F_%T)"
else
    backup_name="${backup_name}-$(basename "${source_dir}")-$(date +%F_%T)"
fi

if [ "${use_crypt_device}" = "yes" ]; then
    test -b "${devpath}" && prompt -s "Found device ${devpath}" || { prompt -e "Could not found device ${devpath}"; exit 1; }
    case "${name}" in
        */*)
            prompt -e "Invalid name for crypt device: ${name}";
            exit 1 ;;
        *) ;;
    esac

    # Mount point (where to mount decrypted deivce)
    mount_point="/tmp/${name}"
    mkdir -p "${mount_point}" || { prompt -e "Failed to create directory ${mount_point}"; exit 1; }

    # Decrypt and mount device
    prompt -i "Opening device ${devpath} as ${name}"
    if ! sudo cryptsetup status "${name}" 2>&1 1>/dev/null; then
        sudo cryptsetup open "${devpath}" "${name}" || { prompt -e "Could not open crypt device"; exit 1; }
    else
        prompt -i "Device is already opened"
    fi

    mountpoint -q "${mount_point}" 2>&1 1>/dev/null && { prompt -e "${mount_point} is already mounted. Please use a different name or unmount it manually"; exit 1; }
    prompt -i "Mounting device /dev/mapper/${name} to ${mount_point}"
    sudo mount "/dev/mapper/${name}" "${mount_point}" || { prompt -e "Failed to mount"; exit 1; }

    destination="${mount_point}/${backup_name}"
else
    if [ "${create_dirs}" = "yes" ]; then
        prompt -i "Creating ${destination}"
        mkdir -p "${destination}" || { prompt -e "Failed to create ${destination}"; exit 1; }
    else
        test -d "${destination}" && prompt -s "Found destination directory ${destination}" || { prompt -e "Could not found destination directory ${destination}"; exit 1; }
    fi
    # Check if destination directory exists
    case "${destination}" in
        */)
            destination="${destination}${backup_name}"
            ;;
        *)
            destination="${destination}/${backup_name}"
            ;;
    esac
fi

rsync_copy_opts="-aAXHv"
[[ "${dry_run}" = "yes" ]] && rsync_copy_opts="${rsync_copy_opts}n"

rsync_opts=("${rsync_copy_opts}" "--info=progress2" "--no-i-r" "--exclude-from=${exclude_from}" "${source_dir}" "${destination}")
prompt -i "Issuing command sudo rsync ${rsync_opts[*]}\n"
sudo rsync "${rsync_opts[@]}"

echo

if [ "${use_crypt_device}" = "yes" ]; then
    # Unmount device
    prompt -i "Unmounting ${mount_point}"
    sudo umount "${mount_point}" || { prompt -e "Failed to unmount. May need manual inspection"; exit 1; }
    
    prompt -i "Removing folder ${mount_point}"
    rm -r "${mount_point}" || prompt -e "Could not remove ${mount_point}. The directory will be left existing"
    
    prompt -i "Closing crypt device ${name}"
    sudo cryptsetup close "${name}" || { prompt -e "Failed to close crypt device. May need manual inspection"; exit 1; }
fi
