#!/bin/bash

# Colors
export c_default="\033[0m"
export c_blue="\033[1;34m"
export c_magenta="\033[1;35m"
export c_cyan="\033[1;36m"
export c_green="\033[1;32m"
export c_red="\033[1;31m"
export c_yellow="\033[1;33m"

# Echo like ... with flag type and display message colors
prompt() {
    case "${1}" in
    "-s")
        echo -e "  ${c_green}${2}${c_default}"
        ;; # print success message
    "-e")
        echo -e "  ${c_red}${2}${c_default}"
        ;; # print error message
    "-w")
        echo -e "  ${c_yellow}${2}${c_default}"
        ;; # print warning message
    "-i")
        echo -e "  ${c_cyan}${2}${c_default}"
        ;; # print info message
    esac
}

# Show help
helpify_title() {
    printf "${c_cyan}%s${c_blue}%s ${c_green}%s\n\n" "Usage: " "$0" "[OPTIONS...]"
    printf "${c_cyan}%s\n" "OPTIONS:"
}

helpify() {
    printf "  ${c_blue}%s ${c_green}%s\n ${c_magenta}%s. ${c_cyan}%s\n\n${c_default}" "${1}" "${2}" "${3}" "${4}"
}

# Defaults
devpath=""
name="backupdrive"
fstype="ext4"
exclude_from="backup_exclude.txt"
source_dir="/"
external=""
dry_run="no"

usage() {
    helpify_title
    helpify "-b --device" "DEV" "Device path" ""
    helpify "-n --name" "NAME" "Name of the crypt device" "Default is ${name}"
    helpify "-f --filesystem" "FS" "Filesystem of backup drive" "Default is ${fstype}"
    helpify "-e --exclude" "FILE" "File to use for excludes" "Default is ${exclude_from}"
    helpify "-d --dir" "DIR" "Directory to backup" "Default is ${source_dir}"
    helpify "--dry-run" "" "Dry run. Print everything instead of doing anything." ""
    helpify "-h --help" "" "Print this message and exit" ""
}

# Helpers
open_device() {
    # Check if given exclude file exists
    if [[ -f "${exclude_from}" ]]; then
        echo "Found ${exclude_from}"
    else
        echo "Could not found ${exclude_from}"
        exit 1
    fi

    # Check if LUKS device is already opened
    if ! sudo cryptsetup status "$name" 1>/dev/null 2>/dev/null; then
        echo "Opening device $devpath with name $name"
        sudo cryptsetup open "$devpath" "$name" || { echo "Could not open crypt device"; exit 1; }
    else
        echo "Device is already opened"
    fi
}

close_device() {
    echo "Unmounting $mount_point"
    sudo umount "$mount_point" || {
        echo "Umount failed"
        exit 1
    }

    echo "Closing crypt device"
    sudo cryptsetup close "$name" || {
        echo "Could not close crypt device"
        exit 1
    }
}

while [[ $# -gt 0 ]]; do

    case "$1" in
    -b | --device)
        devpath="$2"
        shift 2
        ;;
    -n | --name)
        name="$2"
        shift 2
        ;;
    -f | --filesystem)
        fstype="$2"
        shift 2
        ;;
    -e | --exclude)
        exclude_from="$2"
        shift 2
        ;;
    -d | --dir)
        source_dir="$2"
        shift 2
        ;;
    --dry-run)
        dry_run="yes"
        shift
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        usage
        exit 1
        ;;
    esac

done

# Check params
test -b "${devpath}" && prompt -s "Found device ${devpath}" || { prompt -e "Could not found device ${devpath}"; exit 1; }
test -d "${source_dir}" && prompt -s "Found source directory ${source_dir}" || { prompt -e "Could not found source directory ${source_dir}"; exit 1; }
test -f "${exclude_from}" && prompt -s "Found exclude file ${exclude_from}" || { prompt -e "Could not found exclude file ${exclude_from}"; exit 1; }
case "${name}" in
    */*)
        prompt -e "Invalid name for crypt device: ${name}";
        exit 1 ;;
    *) ;;
esac

# Add / at the end of source directory if not already ends with /
case "${source_dir}" in
    */) ;;
    *)
        source_dir="${source_dir}/" ;;
esac

# Backup name (destination directory name)
if [ "${source_dir}" = "/" ]; then
    backup_name="${HOSTNAME:-$USER}-$(date +%F_%T)"
else
    backup_name="${HOSTNAME:-$USER}-$(basename "${source_dir}")-$(date +%F_%T)"
fi

# Mount point (where to mount decrypted deivce)
mount_point="/tmp/${name}"
mkdir -p "${mount_point}" || { prompt -e "Failed to create directory ${mount_point}"; exit 1; }

# Decrypt and mount device
prompt -i "Opening device ${devpath} as ${name}"
if ! sudo cryptsetup status "${name}" 2>&1 1>/dev/null; then
    sudo cryptsetup open "${devpath}" "${name}" || { prompt -e "Could not open crypt device"; exit 1; }
else
    prompt -i "Device is already opened"
fi

mountpoint -q "${mount_point}" 2>&1 1>/dev/null && { prompt -e "${mount_point} is already mounted. Please use a different name or unmount it manually"; exit 1; }
prompt -i "Mounting device /dev/mapper/${name} to ${mount_point}"
sudo mount "/dev/mapper/${name}" "${mount_point}" || { prompt -e "Failed to mount"; exit 1; }

rsync_copy_opts="-aAXHv"
[[ "${dry_run}" = "yes" ]] && rsync_copy_opts="${rsync_copy_opts}n"

rsync_opts=("${rsync_copy_opts}" "--info=progress2" "--exclude-from=${exclude_from}" "${source_dir}" "${mount_point}/${backup_name}")
prompt -i "Issuing command sudo rsync ${rsync_opts[@]}\n"
sudo rsync "${rsync_opts[@]}"

echo

# Unmount device
prompt -i "Unmounting ${mount_point}"
sudo umount "${mount_point}" || { prompt -e "Failed to unmount. May need manual inspection"; exit 1; }

prompt -i "Removing folder ${mount_point}"
rm -r "${mount_point}" || prompt -e "Could not remove ${mount_point}. The directory will be left existing"

prompt -i "Closing crypt device ${name}"
sudo cryptsetup close "${name}" || { prompt -e "Failed to close crypt device. May need manual inspection"; exit 1; }
